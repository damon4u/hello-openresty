# user www www; # 定义Nginx运行的用户和用户组

worker_processes  2; # 表示工作进程的数量，一般设置为cpu的核数

error_log  logs/error.log  info; # nginx的错误日志

# pid /usr/local/nginx/logs/nginx.pid; #进程pid文件

events {
    # 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; 
    # epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。
    # 补充说明：
    # 与apache相类，nginx针对不同的操作系统，有不同的事件模型
    # A）标准事件模型
        # select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
    # B）高效事件模型
        # kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
        # epoll：使用于Linux内核2.6版本及以后的系统。
        # /dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
        # eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
    # use epoll;
    
    worker_connections  1024; # 表示每个工作进程的最大连接数（最大连接数=连接数*进程数）

}
http {
    default_type  application/octet-stream;
    access_log  logs/access.log;
    lua_package_path 'lua-server/?.lua;;';

    log_format log_test
    '"$time_iso8601" ;'
    '"$http_cdn_src_ip" ;'
    '"$remote_user" ;'
    '"$request_method" ;'
    '"$host" ;'
    '"$http_user_agent" ;'
    '"$upstream_addr" ;'
    '"$upstream_response_time" ;'
    '"$request_uri" ;'
    '"$request_time" ;'
    '"$body_bytes_sent" ;'
    '"$http_referer" ;'
    '"$status" ;'
    '"$upstream_status" ;'
    '"$hostname" ;'
    '"$scheme"';

    proxy_cache_path        /usr/local/Cellar/openresty/1.13.6.2/nginx/cache  levels=1:2   keys_zone=cache_test:64m inactive=1d max_size=1g;
    proxy_cache_use_stale   error timeout updating invalid_header http_500 http_502 http_503 http_504 http_404;
    proxy_cache_key         $host$uri$is_args$args;

    proxy_cache cache_test;

    server { # 块定义了虚拟主机
        listen       7777; # 监听端口
        server_name  localhost; # 监听域名
        default_type text/html;

        root html; # 指定对应uri的资源查找路径，这里html为相对路径，完整路径为 $NGINX_HOME/html/
        index index.html; # 指定首页index文件的名称，可以配置多个，以空格分开。如有多个，按配置顺序查找。 
        # 在浏览器输入http://localhost:7777实际上就是访问 $NGINX_HOME/html/index.html

        access_log logs/access.log log_test; # 指令用来指定访问日志文件的存放路径 日志格式

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        
        location /README.md {
            proxy_pass https://github.com/moonbingbing/openresty-best-practices/blob/master/README.md;
        }

        location = /testLuaFile {
            content_by_lua_file lua-server/test.lua;
        }
        
        location = /testLua {
            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }
        
        location = /sum {
            # 只允许内部调用
            internal;

            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /testSum {
            content_by_lua_block {
                local res = ngx.location.capture("/sum",{args={a=3,b=8}})
                ngx.say("status:", res.status, ", response:", res.body)
            }
        }
        
        location = /testRedirect {
            content_by_lua_block {
                return ngx.redirect("/testSum");
            }
        }
    }
}